version: "3.9"

networks:
  fulexo-network:
    driver: bridge

services:
  # --- FULEXO SERVICES START ---
  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx/conf.d/app.dev.conf:/etc/nginx/conf.d/default.conf:ro
    ports: ["80:80"]
    depends_on: [api, web]
    restart: unless-stopped
    networks:
      - fulexo-network

  postgres:
    image: postgres:16
    env_file: ${ENV_FILE:-../.env}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - fulexo-network

  valkey:
    image: valkey/valkey:7
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkeydata:/data
    ports:
      - "6380:6379"
    restart: unless-stopped
    networks:
      - fulexo-network

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - miniodata:/data
    restart: unless-stopped
    networks:
      - fulexo-network

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
      args:
        - NODE_ENV=development
    env_file: ../.env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://valkey:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-fulexo-cache}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      MASTER_KEY_HEX: ${MASTER_KEY_HEX}
      DOMAIN_API: ${DOMAIN_API:-http://localhost:3000}
      DOMAIN_APP: ${DOMAIN_APP:-http://localhost:3001}
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE:-http://localhost:3000}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3001}
      NODE_ENV: development
      KARRIO_API_URL: http://karrio-server:5002
      FULEXO_TO_KARRIO_API_TOKEN: ${FULEXO_TO_KARRIO_API_TOKEN}
      FULEXO_INTERNAL_API_TOKEN: ${FULEXO_INTERNAL_API_TOKEN}
    depends_on: [postgres, valkey, minio]
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - fulexo-network

  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
      args:
        - NODE_ENV=development
    env_file: ${ENV_FILE:-../.env}
    environment:
      NODE_ENV: development
      BACKEND_API_BASE: http://api:3000
      NEXT_PUBLIC_API_BASE: http://localhost:3000
      NEXT_PUBLIC_APP_URL: http://localhost:3001
      SHARE_BASE_URL: http://localhost:3001
      DOMAIN_API: ${DOMAIN_API:-http://localhost:3000}
      DOMAIN_APP: ${DOMAIN_APP:-http://localhost:3001}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3001}
      WEB_URL: ${WEB_URL:-http://localhost:3001}
    depends_on: [api]
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - fulexo-network

  worker:
    build:
      context: ..
      dockerfile: apps/worker/Dockerfile
      args:
        - NODE_ENV=development
    env_file: ../.env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://valkey:6379/0
      NODE_ENV: development
      FULEXO_API_URL: http://api:3000
      KARRIO_API_URL: http://karrio-server:5002
      FULEXO_TO_KARRIO_API_TOKEN: ${FULEXO_TO_KARRIO_API_TOKEN}
      FULEXO_INTERNAL_API_TOKEN: ${FULEXO_INTERNAL_API_TOKEN}
    ports: ["3002:3002"]
    depends_on: [postgres, valkey, api]
    restart: unless-stopped
    networks:
      - fulexo-network
  # --- FULEXO SERVICES END ---

  # --- KARRIO SERVICES START ---
  karrio-db:
    image: postgres:13-alpine
    container_name: karrio-db
    volumes:
      - karrio_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${KARRIO_POSTGRES_USER:-karrio}
      - POSTGRES_PASSWORD=${KARRIO_POSTGRES_PASSWORD:-karrio}
      - POSTGRES_DB=${KARRIO_POSTGRES_DB:-karrio}
    networks:
      - fulexo-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  karrio-redis:
    image: redis:6.2-alpine
    container_name: karrio-redis
    volumes:
      - karrio_redis_data:/data
    networks:
      - fulexo-network
    restart: always

  karrio-server:
    build:
      context: ../karrio
      dockerfile: ./docker/api/Dockerfile
    container_name: karrio-server
    ports:
      - "5002:5002"
    environment:
      - SECRET_KEY=${KARRIO_SECRET_KEY:-development-secret}
      - DATABASE_URL=postgres://${KARRIO_POSTGRES_USER:-karrio}:${KARRIO_POSTGRES_PASSWORD:-karrio}@karrio-db:5432/${KARRIO_POSTGRES_DB:-karrio}
      - REDIS_URL=redis://karrio-redis:6379/1
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeme}
      - ALLOWED_HOSTS=localhost,127.0.0.1,karrio-server
      - CORS_ALLOWED_ORIGINS=http://localhost:3001,http://localhost:5001
      - KARRIO_ADMIN_URL=http://localhost:5001
    depends_on:
      karrio-db:
        condition: service_healthy
      karrio-redis:
        condition: service_started
    networks:
      - fulexo-network
    restart: always

  karrio-dashboard:
    build:
      context: ../karrio
      dockerfile: ./docker/dashboard/Dockerfile
    container_name: karrio-dashboard
    ports:
      - "5001:3002"
    environment:
      - NEXT_PUBLIC_KARRIO_PUBLIC_URL=http://localhost:5002
      - KARRIO_URL=http://karrio-server:5002
    depends_on:
      - karrio-server
    networks:
      - fulexo-network
    restart: always
  # --- KARRIO SERVICES END ---

volumes:
  pgdata:
  valkeydata:
  miniodata:
  karrio_db_data:
  karrio_redis_data: