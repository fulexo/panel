version: "3.9"

networks:
  fulexo-network:
    driver: bridge

services:
  # --- FULEXO SERVICES START ---
  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports: ["80:80", "443:443"]
    depends_on: [api, web]
    restart: unless-stopped
    environment:
      - DOMAIN_API=${DOMAIN_API}
      - DOMAIN_APP=${DOMAIN_APP}
    command: >
      sh -c "
        API_HOST=$(printf '%s' "$DOMAIN_API" | sed -E 's#^https?://##; s#/.*$##') && \
        APP_HOST=$(printf '%s' "$DOMAIN_APP" | sed -E 's#^https?://##; s#/.*$##') && \
        export API_HOST APP_HOST && \
        envsubst '$$API_HOST $$APP_HOST' < /etc/nginx/conf.d/app.conf.template > /etc/nginx/conf.d/app.conf && \
        nginx -g 'daemon off;'
      "
    networks:
      - fulexo-network

  postgres:
    image: postgres:16
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - fulexo-network

  valkey:
    image: valkey/valkey:7
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkeydata:/data
    ports:
      - "6380:6379"
    restart: unless-stopped
    networks:
      - fulexo-network

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - miniodata:/data
    restart: unless-stopped
    networks:
      - fulexo-network

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
      args:
        - NODE_ENV=production
    env_file: .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      MASTER_KEY_HEX: ${MASTER_KEY_HEX}
      DOMAIN_API: ${DOMAIN_API}
      DOMAIN_APP: ${DOMAIN_APP}
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      WEB_URL: ${WEB_URL}
      NODE_ENV: ${NODE_ENV}
      KARRIO_API_URL: http://karrio-server:5002
      FULEXO_TO_KARRIO_API_TOKEN: ${FULEXO_TO_KARRIO_API_TOKEN}
      FULEXO_INTERNAL_API_TOKEN: ${FULEXO_INTERNAL_API_TOKEN}
    depends_on: [postgres, valkey, minio]
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - fulexo-network

  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
      args:
        - NODE_ENV=production
    env_file: .env
    environment:
      NODE_ENV: ${NODE_ENV}
      BACKEND_API_BASE: ${BACKEND_API_BASE}
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      WEB_URL: ${WEB_URL}
      SHARE_BASE_URL: ${SHARE_BASE_URL}
      DOMAIN_API: ${DOMAIN_API}
      DOMAIN_APP: ${DOMAIN_APP}
    depends_on: [api]
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - fulexo-network

  worker:
    build:
      context: ..
      dockerfile: apps/worker/Dockerfile
      args:
        - NODE_ENV=production
    env_file: .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: ${NODE_ENV}
      FULEXO_API_URL: http://api:3000
      KARRIO_API_URL: http://karrio-server:5002
      FULEXO_TO_KARRIO_API_TOKEN: ${FULEXO_TO_KARRIO_API_TOKEN}
      FULEXO_INTERNAL_API_TOKEN: ${FULEXO_INTERNAL_API_TOKEN}
    ports: ["3002:3002"]
    depends_on: [postgres, valkey, api]
    restart: unless-stopped
    networks:
      - fulexo-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheusdata:/prometheus
    restart: unless-stopped
    networks:
      - fulexo-network

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml:ro
    ports: ["9093:9093"]
    depends_on: [prometheus]
    restart: unless-stopped
    networks:
      - fulexo-network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafanadata:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    ports: ["3003:3000"]
    depends_on: [prometheus]
    restart: unless-stopped
    networks:
      - fulexo-network

  loki:
    image: grafana/loki:2.9.0
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro
      - lokidata:/loki
    command: ["-config.file=/etc/loki/config.yml"]
    restart: unless-stopped
    networks:
      - fulexo-network

  promtail:
    image: grafana/promtail:3.0.0
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: ["-config.file=/etc/promtail/config.yml"]
    depends_on: [loki]
    restart: unless-stopped
    networks:
      - fulexo-network

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports: ["16686:16686"]
    restart: unless-stopped
    networks:
      - fulexo-network

  uptimekuma:
    image: louislam/uptime-kuma:1
    volumes:
      - kumadata:/app/data
    ports: ["3004:3001"]
    restart: unless-stopped
    networks:
      - fulexo-network

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports: ["9100:9100"]
    restart: unless-stopped
    networks:
      - fulexo-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports: ["8080:8080"]
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - fulexo-network
  # --- FULEXO SERVICES END ---

  # --- KARRIO SERVICES START ---
  karrio-db:
    image: postgres:13-alpine
    container_name: karrio-db
    volumes:
      - karrio_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${KARRIO_POSTGRES_USER:-karrio}
      - POSTGRES_PASSWORD=${KARRIO_POSTGRES_PASSWORD:-karrio}
      - POSTGRES_DB=${KARRIO_POSTGRES_DB:-karrio}
    networks:
      - fulexo-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  karrio-redis:
    image: redis:6.2-alpine
    container_name: karrio-redis
    volumes:
      - karrio_redis_data:/data
    networks:
      - fulexo-network
    restart: always

  karrio-server:
    build:
      context: ../karrio
      dockerfile: ./docker/api/Dockerfile
    container_name: karrio-server
    ports:
      - "5002:5002"
    environment:
      # --- Sourced from root .env file ---
      - SECRET_KEY=${KARRIO_SECRET_KEY}
      - DATABASE_URL=postgres://${KARRIO_POSTGRES_USER:-karrio}:${KARRIO_POSTGRES_PASSWORD:-karrio}@karrio-db:5432/${KARRIO_POSTGRES_DB:-karrio}
      - REDIS_URL=redis://karrio-redis:6379/1
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeme}
      - ALLOWED_HOSTS=${KARRIO_ALLOWED_HOSTS:-localhost,127.0.0.1,karrio-server}
      - CORS_ALLOWED_ORIGINS=${KARRIO_CORS_ALLOWED_ORIGINS:-http://localhost:3001,http://localhost:5001}
      - KARRIO_ADMIN_URL=http://localhost:5001
      # --- Carrier Credentials ---
      - UPS_USERNAME=${UPS_USERNAME}
      - UPS_PASSWORD=${UPS_PASSWORD}
      - UPS_ACCESS_LICENSE_NUMBER=${UPS_ACCESS_LICENSE_NUMBER}
    depends_on:
      karrio-db:
        condition: service_healthy
      karrio-redis:
        condition: service_started
    networks:
      - fulexo-network
    restart: always

  karrio-dashboard:
    build:
      context: ../karrio
      dockerfile: ./docker/dashboard/Dockerfile
    container_name: karrio-dashboard
    ports:
      - "5001:3002"
    environment:
      - NEXT_PUBLIC_KARRIO_PUBLIC_URL=http://localhost:5002
      - KARRIO_URL=http://karrio-server:5002
    depends_on:
      - karrio-server
    networks:
      - fulexo-network
    restart: always
  # --- KARRIO SERVICES END ---

volumes:
  pgdata:
  valkeydata:
  miniodata:
  prometheusdata:
  grafanadata:
  lokidata:
  kumadata:
  karrio_db_data:
  karrio_redis_data:
