version: "3.9"
services:
  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports: ["80:80", "443:443"]
    depends_on: [api, web]
    restart: unless-stopped

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  valkey:
    image: valkey/valkey:7
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkeydata:/data
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - miniodata:/data
    restart: unless-stopped

  api:
    build: 
      context: ../apps/api
      args:
        - NODE_ENV=production
    env_file: ${ENV_FILE:-.env}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DOMAIN_API: ${DOMAIN_API}
      DOMAIN_APP: ${DOMAIN_APP}
      NODE_ENV: ${NODE_ENV}
    depends_on: [postgres, valkey, minio]
    restart: unless-stopped

  web:
    build:
      context: ../apps/web
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    env_file: ${ENV_FILE:-.env}
    environment:
      NODE_ENV: ${NODE_ENV}
    depends_on: [api]
    restart: unless-stopped

  worker:
    build:
      context: ..
      dockerfile: apps/worker/Dockerfile
      args:
        - NODE_ENV=production
    env_file: ${ENV_FILE:-.env}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: ${NODE_ENV}
    depends_on: [postgres, valkey]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheusdata:/prometheus
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml:ro
    ports: ["9093:9093"]
    depends_on: [prometheus]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafanadata:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    ports: ["3002:3000"]
    depends_on: [prometheus]
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro
      - lokidata:/loki
    command: ["-config.file=/etc/loki/config.yml"]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.0.0
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: ["-config.file=/etc/promtail/config.yml"]
    depends_on: [loki]
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports: ["16686:16686"]
    restart: unless-stopped

  uptimekuma:
    image: louislam/uptime-kuma:1
    volumes:
      - kumadata:/app/data
    ports: ["3001:3001"]
    restart: unless-stopped

volumes:
  pgdata:
  valkeydata:
  miniodata:
  prometheusdata:
  grafanadata:
  lokidata:
  kumadata: