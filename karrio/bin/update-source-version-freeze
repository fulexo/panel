#!/usr/bin/env bash

# Function to convert egg name to PyPI package name
convert_egg_to_pypi() {
    local egg_name="$1"

    # Handle special cases
    case $egg_name in
        karrio)
            echo "karrio"
            ;;
        pysoap)
            echo "pysoap"
            ;;
        karrio_cli)
            echo "karrio-cli"
            ;;
        *)
            # Convert karrio_* patterns to karrio-* (replace underscores with hyphens)
            if [[ $egg_name =~ ^karrio_ ]]; then
                echo "$egg_name" | sed 's/_/-/g'
            else
                echo "$egg_name" | sed 's/_/-/g'
            fi
            ;;
    esac
}

# Function to generate PyPI requirements file
generate_pypi_requirements() {
    local input_file=$1
    local output_file=$2

    echo "Generating ${output_file} with PyPI packages..."

    # Get target version
    local target_version=$(cat apps/api/karrio/server/VERSION)

    # Create a temporary file
    TMP_FILE=$(mktemp)

    # Handle different index URLs based on the file type
    if [[ "$input_file" == *"insiders"* ]]; then
        # For insiders, use GitHub releases index URL
        echo "--extra-index-url https://github.com/karrioapi/karrio-insiders/releases/" >"$TMP_FILE"
    else
        # Copy the header (--extra-index-url lines) for other files
        grep "^--extra-index" "$input_file" >"$TMP_FILE"
    fi

    # Process each line
    while IFS= read -r line; do
        if [[ $line == -e\ git+https://github.com/* ]]; then
            # Extract egg name from git URL
            if [[ $line =~ \#egg=([^&]+) ]]; then
                egg_name="${BASH_REMATCH[1]}"
                pypi_package=$(convert_egg_to_pypi "$egg_name")
                echo "$pypi_package==$target_version" >>"$TMP_FILE"
            else
                # If we can't extract egg name, keep the original line
                echo "$line" >>"$TMP_FILE"
            fi
        elif [[ $line != --extra-index* ]]; then
            # Copy non-git requirements as-is
            echo "$line" >>"$TMP_FILE"
        fi
    done <"$input_file"

    # Add a newline at the end
    echo "" >>"$TMP_FILE"

    # Replace the original file
    mv "$TMP_FILE" "$output_file"
}

# Function to generate source requirements file
generate_source_requirements() {
    local input_file=$1
    local output_file=$2
    local repo_type=$3

    echo "Generating ${output_file}..."

    # Create a temporary file
    TMP_FILE=$(mktemp)

    # Copy the header (--extra-index-url line)
    grep "^--extra-index" "$input_file" >"$TMP_FILE"

    # Process each line
    while IFS= read -r line; do
        if [[ $line == -e\ git+https://github.com/* ]]; then
            # Extract repository name, egg name and subdirectory
            if [[ $line =~ github.com/[^/]+/([^.]+)(.git)?@[^#]+#egg=([^&]+)\&subdirectory=(.+)$ ]]; then
                repo="${BASH_REMATCH[1]}"
                egg_name="${BASH_REMATCH[3]}"
                subdir="${BASH_REMATCH[4]}"

                # Handle different repository paths based on actual subdirectory structure
                if [[ $subdir =~ ^../../ee/insiders/ ]]; then
                    # Remove ../../ prefix but keep ee/insiders/ path
                    subdir="ee/insiders/${subdir#../../ee/insiders/}"
                elif [[ $subdir =~ ^../../ee/platform/ ]]; then
                    # Remove ../../ prefix but keep ee/platform/ path
                    subdir="ee/platform/${subdir#../../ee/platform/}"
                elif [[ $subdir =~ ^community/plugins/ ]]; then
                    # Keep community/plugins/ paths as-is
                    subdir="$subdir"
                else
                    # Keep other subdirectories as-is (modules/, apps/, etc.)
                    subdir="$subdir"
                fi

                # Replace git URL with local file path
                echo "${egg_name} @ file://\${PWD}/${subdir}" >>"$TMP_FILE"
            fi
        elif [[ $line != --extra-index* ]]; then
            # Copy non-git requirements as-is
            echo "$line" >>"$TMP_FILE"
        fi
    done <"$input_file"

    # Add a newline at the end
    echo "" >>"$TMP_FILE"

    # Replace the original file
    mv "$TMP_FILE" "$output_file"
}

# Function to generate PyPI requirements for platform (special handling for karrio_server_tenants)
generate_platform_pypi_requirements() {
    local input_file=$1
    local output_file=$2

    echo "Generating ${output_file} with PyPI packages (keeping karrio_server_tenants as git)..."

    # Get target version
    local target_version=$(cat apps/api/karrio/server/VERSION)

    # Create a temporary file
    TMP_FILE=$(mktemp)

    # Copy the header (--extra-index-url line)
    grep "^--extra-index" "$input_file" >"$TMP_FILE"

    # Process each line
    while IFS= read -r line; do
        if [[ $line == -e\ git+https://github.com/* ]]; then
            # Extract egg name from git URL
            if [[ $line =~ \#egg=([^&]+) ]]; then
                egg_name="${BASH_REMATCH[1]}"
                
                # Keep karrio_server_tenants as git, convert all others to PyPI
                if [[ "$egg_name" == "karrio_server_tenants" ]]; then
                    # Clean up the subdirectory path by removing ../../ prefix
                    cleaned_line=$(echo "$line" | sed 's|subdirectory=../../|subdirectory=|')
                    echo "$cleaned_line" >>"$TMP_FILE"
                else
                    # Convert to PyPI package
                    pypi_package=$(convert_egg_to_pypi "$egg_name")
                    echo "$pypi_package==$target_version" >>"$TMP_FILE"
                fi
            else
                # If we can't extract egg name, keep the original line
                echo "$line" >>"$TMP_FILE"
            fi
        elif [[ $line != --extra-index* ]]; then
            # Copy non-git requirements as-is
            echo "$line" >>"$TMP_FILE"
        fi
    done <"$input_file"

    # Add a newline at the end
    echo "" >>"$TMP_FILE"

    # Replace the original file
    mv "$TMP_FILE" "$output_file"
}

# First, backup the original requirements files with git URLs
cp requirements.txt requirements.txt.git
cp requirements.insiders.txt requirements.insiders.txt.git
cp requirements.platform.txt requirements.platform.txt.git

# Generate source requirements from the git URL versions
generate_source_requirements "requirements.txt.git" "source.requirements.txt" "base"
generate_source_requirements "requirements.insiders.txt.git" "source.requirements.insiders.txt" "insiders"
generate_source_requirements "requirements.platform.txt.git" "source.requirements.platform.txt" "platform"

# Generate PyPI requirements (convert git URLs to PyPI package versions)
generate_pypi_requirements "requirements.txt.git" "requirements.txt"

# Generate PyPI requirements for insiders (convert git URLs to PyPI package versions)
generate_pypi_requirements "requirements.insiders.txt.git" "requirements.insiders.txt"

# Generate PyPI requirements for platform (convert git URLs to PyPI package versions, but keep karrio_server_tenants as git)
generate_platform_pypi_requirements "requirements.platform.txt.git" "requirements.platform.txt"

# Clean up temporary files
rm -f requirements.txt.git requirements.insiders.txt.git requirements.platform.txt.git

echo "Generated source requirements files from requirements files"
echo "Updated requirements.txt with PyPI package versions"
echo "Updated requirements.insiders.txt with PyPI package versions"
echo "Updated requirements.platform.txt with PyPI package versions (except karrio_server_tenants)"
