#!/bin/bash

# =============================================================================
# Fulexo Panel - E2E Testing Setup Script
# =============================================================================
# This script automates the complete setup for E2E testing including:
# - Environment file creation
# - Dependency installation
# - Database setup
# - Docker infrastructure startup
# =============================================================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# =============================================================================
# Step 1: Prerequisites Check
# =============================================================================
log_info "Checking prerequisites..."

if ! command_exists node; then
    log_error "Node.js is not installed. Please install Node.js 18+ first."
    exit 1
fi

if ! command_exists npm; then
    log_error "npm is not installed. Please install npm first."
    exit 1
fi

if ! command_exists docker; then
    log_error "Docker is not installed. Please install Docker first."
    exit 1
fi

if ! command_exists docker-compose; then
    log_warning "docker-compose command not found. Trying 'docker compose'..."
    if ! docker compose version >/dev/null 2>&1; then
        log_error "Docker Compose is not available. Please install Docker Compose."
        exit 1
    fi
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE="docker-compose"
fi

log_success "All prerequisites are installed"

# =============================================================================
# Step 2: Create Environment Files
# =============================================================================
log_info "Creating environment files..."

# Generate secure secrets
JWT_SECRET=$(node -e "console.log(require('crypto').randomBytes(64).toString('hex'))")
ENCRYPTION_KEY=$(node -e "console.log(require('crypto').randomBytes(16).toString('hex'))")
MASTER_KEY_HEX=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
KARRIO_SECRET=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
INTERNAL_TOKEN=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
KARRIO_TOKEN=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")

# Create .env file in root
cat > .env << EOF
# Fulexo Panel - Environment Configuration
# Auto-generated by setup-e2e-testing.sh

NODE_ENV=development
PORT=3000
WORKER_PORT=3002

# Database
POSTGRES_DB=fulexo_dev
POSTGRES_USER=fulexo
POSTGRES_PASSWORD=fulexo_dev_password_2024
DATABASE_URL=postgresql://fulexo:fulexo_dev_password_2024@localhost:5433/fulexo_dev

# Redis
REDIS_URL=redis://localhost:6380

# Security
JWT_SECRET=${JWT_SECRET}
ENCRYPTION_KEY=${ENCRYPTION_KEY}
MASTER_KEY_HEX=${MASTER_KEY_HEX}
SHARE_TOKEN_SECRET=${JWT_SECRET}

# Domains
DOMAIN_API=localhost:3000
DOMAIN_APP=localhost:3001
NEXT_PUBLIC_API_BASE=http://localhost:3000/api
NEXT_PUBLIC_APP_URL=http://localhost:3001
FRONTEND_URL=http://localhost:3001
WEB_URL=http://localhost:3001
SHARE_BASE_URL=http://localhost:3001/share

# S3/MinIO
S3_ENDPOINT=http://localhost:9000
S3_ACCESS_KEY=fulexo_minio_access_key
S3_SECRET_KEY=fulexo_minio_secret_key_2024
S3_BUCKET=fulexo-uploads
S3_REGION=us-east-1

# Karrio
KARRIO_POSTGRES_DB=karrio
KARRIO_POSTGRES_USER=karrio
KARRIO_POSTGRES_PASSWORD=karrio_dev_password_2024
KARRIO_SECRET_KEY=${KARRIO_SECRET}
KARRIO_ALLOWED_HOSTS=localhost,127.0.0.1,karrio-server,karrio-dashboard
KARRIO_CORS_ALLOWED_ORIGINS=http://localhost:3001,http://localhost:5001,http://localhost:3000
KARRIO_ADMIN_URL=http://localhost:5001
KARRIO_API_URL=http://localhost:5002
ADMIN_EMAIL=admin@fulexo.local
ADMIN_PASSWORD=FulexoAdmin2024!
FULEXO_TO_KARRIO_API_TOKEN=${KARRIO_TOKEN}
FULEXO_INTERNAL_API_TOKEN=${INTERNAL_TOKEN}

# Email (Optional)
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=
SMTP_PASS=
SMTP_FROM=noreply@fulexo.local

# Monitoring
GF_SECURITY_ADMIN_PASSWORD=fulexo_grafana_admin_2024
LOG_LEVEL=info

# Rate Limiting
THROTTLE_TTL=60
THROTTLE_LIMIT=100

# Feature Flags
ENABLE_2FA=true
ENABLE_AUDIT_LOGGING=true
ENABLE_METRICS=true

# Docker
ENV_FILE=.env
COMPOSE_PROJECT_NAME=fulexo
EOF

# Copy to compose directory
cp .env compose/.env

log_success "Environment files created with secure secrets"

# =============================================================================
# Step 3: Install Dependencies
# =============================================================================
log_info "Installing dependencies..."

log_info "Installing root dependencies..."
npm install

log_info "Installing API dependencies..."
cd apps/api && npm install && cd ../..

log_info "Installing Web dependencies..."
cd apps/web && npm install && cd ../..

log_info "Installing Worker dependencies..."
cd apps/worker && npm install && cd ../..

log_success "All dependencies installed"

# =============================================================================
# Step 4: Generate Prisma Client
# =============================================================================
log_info "Generating Prisma client..."
cd apps/api && npm run prisma:generate && cd ../..
log_success "Prisma client generated"

# =============================================================================
# Step 5: Start Docker Infrastructure
# =============================================================================
log_info "Starting Docker infrastructure..."

cd compose

log_info "Starting core services (PostgreSQL, Redis, MinIO)..."
$DOCKER_COMPOSE up -d postgres valkey minio

log_info "Waiting for services to be healthy (30 seconds)..."
sleep 30

log_info "Starting Karrio services..."
$DOCKER_COMPOSE up -d karrio-db karrio-redis

log_info "Waiting for Karrio databases (20 seconds)..."
sleep 20

log_info "Starting Karrio server and dashboard..."
$DOCKER_COMPOSE up -d karrio-server karrio-dashboard

log_info "Waiting for Karrio to initialize (30 seconds)..."
sleep 30

cd ..

log_success "Docker infrastructure started"

# =============================================================================
# Step 6: Run Database Migrations
# =============================================================================
log_info "Running database migrations..."
cd apps/api && npm run prisma:migrate:deploy && cd ../..
log_success "Database migrations completed"

# =============================================================================
# Step 7: Seed Database (Optional)
# =============================================================================
log_info "Seeding database with test data..."
if cd apps/api && npm run prisma:seed 2>/dev/null; then
    log_success "Database seeded successfully"
else
    log_warning "Database seeding skipped (no seed script or failed)"
fi
cd ../..

# =============================================================================
# Step 8: Start Fulexo Applications
# =============================================================================
log_info "Starting Fulexo applications..."

cd compose
$DOCKER_COMPOSE up -d api web worker
cd ..

log_info "Waiting for applications to start (20 seconds)..."
sleep 20

# =============================================================================
# Step 9: Health Checks
# =============================================================================
log_info "Performing health checks..."

# Check API health
if curl -sf http://localhost:3000/health > /dev/null 2>&1; then
    log_success "API is healthy (http://localhost:3000)"
else
    log_warning "API health check failed or service not ready yet"
fi

# Check Web
if curl -sf http://localhost:3001 > /dev/null 2>&1; then
    log_success "Web is accessible (http://localhost:3001)"
else
    log_warning "Web health check failed or service not ready yet"
fi

# Check Worker
if curl -sf http://localhost:3002/health > /dev/null 2>&1; then
    log_success "Worker is healthy (http://localhost:3002)"
else
    log_warning "Worker health check failed or service not ready yet"
fi

# Check Karrio
if curl -sf http://localhost:5002 > /dev/null 2>&1; then
    log_success "Karrio is accessible (http://localhost:5002)"
else
    log_warning "Karrio health check failed or service not ready yet"
fi

# =============================================================================
# Step 10: Start Monitoring Stack (Optional)
# =============================================================================
log_info "Starting monitoring stack..."

cd compose
$DOCKER_COMPOSE up -d prometheus grafana loki promtail jaeger uptimekuma node-exporter cadvisor alertmanager
cd ..

log_success "Monitoring stack started"

# =============================================================================
# Summary
# =============================================================================
echo ""
echo "========================================================================="
log_success "E2E Testing Environment Setup Complete!"
echo "========================================================================="
echo ""
echo "🚀 Services Running:"
echo "   - API:              http://localhost:3000"
echo "   - Web:              http://localhost:3001"
echo "   - Worker:           http://localhost:3002"
echo "   - Karrio API:       http://localhost:5002"
echo "   - Karrio Dashboard: http://localhost:5001"
echo "   - MinIO Console:    http://localhost:9001"
echo ""
echo "📊 Monitoring:"
echo "   - Grafana:          http://localhost:3003 (admin / fulexo_grafana_admin_2024)"
echo "   - Prometheus:       http://localhost:9090"
echo "   - Jaeger:           http://localhost:16686"
echo "   - Uptime Kuma:      http://localhost:3004"
echo ""
echo "🔧 Development Tools:"
echo "   - Prisma Studio:    cd apps/api && npm run prisma:studio"
echo ""
echo "📝 Next Steps:"
echo "   1. Verify all services are healthy"
echo "   2. Run health checks: curl http://localhost:3000/health"
echo "   3. Access the web app: http://localhost:3001"
echo "   4. Check logs: cd compose && docker-compose logs -f"
echo ""
echo "📖 Documentation:"
echo "   - ENV_SETUP_GUIDE.md - Environment configuration details"
echo "   - e2e-testing-and-validation.plan.md - Complete testing plan"
echo ""
log_info "To stop all services: cd compose && docker-compose down"
log_info "To view logs: cd compose && docker-compose logs -f [service-name]"
echo ""

