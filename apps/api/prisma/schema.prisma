datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  users     User[]
  
  ownershipRules OwnershipRule[]
  customers Customer[]
  orders    Order[]
  products  Product[]
  requests  Request[]
  policies  Policy[]
  auditLogs AuditLog[]
  businessHours BusinessHours[]
  holidays  Holiday[]
  calendarEvents CalendarEvent[]
  oauthCredentials OAuthCredential[]
  billingBatches BillingBatch[]
  inboundShipments InboundShipment[]
  settings  Settings[]
  wooStores WooStore[]
  invoices  Invoice[]
  payments  Payment[]
  shipments Shipment[]
  returns   Return[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String   @id @default(uuid())
  tenantId      String
  email         String   @unique
  name          String?
  passwordHash  String
  role          String
  twofaSecret   String?
  twofaEnabled  Boolean  @default(false)
  lastLoginAt   DateTime?
  failedAttempts Int     @default(0)
  lockedUntil   DateTime?
  isActive      Boolean  @default(true)
  notificationPreferences Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  sessions      Session[]
  auditLogs     AuditLog[]
  requests      Request[]
  requestComments RequestComment[]

  @@index([tenantId])
  @@index([tenantId, role])
  @@index([tenantId, isActive])
  @@index([tenantId, lastLoginAt])
  @@index([tenantId, createdAt])
  @@index([role])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([createdAt])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  fingerprint String?
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([userId, expiresAt])
}


model OwnershipRule {
  id             String  @id @default(uuid())
  tenantId       String
  entityType     String
  priority       Int
  conditionsJson Json
  actionJson     Json
  active         Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId, entityType, priority])
}

model Policy {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  description String?
  modules     Json     // {orders: true, shipments: true, ...}
  actions     Json     // {allowDownloadLabels: true, ...}
  dataScope   Json     // {allowedStatuses: [], ...}
  piiSettings Json     // {maskEmail: true, ...}
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  @@unique([tenantId, name])
}

// EntityMap removed

// Generic mapping for remote provider entities (provider-agnostic)
model RemoteEntityMap {
  id         String   @id @default(uuid())
  tenantId   String
  storeId    String
  provider   String   // 'woocommerce'
  entityType String   // 'order' | 'product' | 'customer' | ...
  remoteId   String
  localType  String   // maps to local table type
  localId    String
  createdAt  DateTime @default(now())

  @@unique([storeId, entityType, remoteId])
  @@index([tenantId, provider, entityType])
}

model Customer {
  id             String   @id @default(uuid())
  tenantId       String
  storeId        String?
  email          String?
  emailNormalized String?
  phoneE164      String?
  name           String?
  company        String?
  vatId          String?
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  notes          String?
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  store          WooStore? @relation(fields: [storeId], references: [id])
  orders         Order[]

  @@unique([tenantId, emailNormalized])
  @@index([tenantId, phoneE164])
  @@index([tenantId, storeId])
  @@index([tenantId, createdAt])
  @@index([tenantId, name])
  @@index([tenantId, company])
  @@index([tenantId, country])
  @@index([tenantId, city])
  @@index([createdAt])
}

model Order {
  id             String   @id @default(uuid())
  tenantId       String
  customerId     String?
  storeId        String?
  
  orderNo        Int?
  
  externalOrderNo String?
  orderSource    String?
  status         String?
  mappedStatus   String?
  total          Decimal? @db.Decimal(14,2)
  currency       String?
  customerEmail  String?
  customerPhone  String?
  shippingAddress Json?
  billingAddress Json?
  paymentMethod  String?
  notes          String?
  tags           String[]
  confirmedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  customer       Customer? @relation(fields: [customerId], references: [id])
  store          WooStore? @relation(fields: [storeId], references: [id])
  
  items          OrderItem[]
  shipments      Shipment[]
  returns        Return[]
  invoices       Invoice[]
  serviceCharges OrderServiceCharge[]

  
  @@unique([tenantId, orderNo])
  @@index([tenantId, status, confirmedAt])
  @@index([tenantId, customerEmail])
  @@index([tenantId, externalOrderNo])
  @@index([tenantId, storeId])
  @@index([tenantId, createdAt])
  @@index([tenantId, customerEmail, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, total])
  @@index([tenantId, paymentMethod])
  @@index([tenantId, orderSource])
  @@index([createdAt])
  @@index([confirmedAt])
}

model OrderItem {
  id      String  @id @default(uuid())
  orderId String
  sku     String?
  name    String?
  qty     Int
  price   Decimal? @db.Decimal(14,2)
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
}

model Shipment {
  id          String   @id @default(uuid())
  orderId     String
  tenantId    String
  
  carrier     String?
  trackingNo  String?
  status      String?
  labelUrl    String?
  protocolUrl String?
  weight      Decimal? @db.Decimal(10,3)
  dimensions  Json?
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  @@index([trackingNo])
  @@index([orderId])
  @@index([tenantId, status])
  @@index([tenantId, carrier])
  @@index([tenantId, createdAt])
}

model Product {
  id          String   @id @default(uuid())
  tenantId    String
  storeId     String?
  sku         String
  name        String?
  description String?
  price       Decimal? @db.Decimal(14,2)
  stock       Int?
  weight      Decimal? @db.Decimal(10,3)
  dimensions  Json?
  images      String[]
  tags        String[]
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  store       WooStore? @relation(fields: [storeId], references: [id])
  inboundItems InboundItem[]
  stockMovements StockMovement[]

  @@unique([tenantId, sku])
  @@index([tenantId, active])
  @@index([tenantId, storeId])
  @@index([tenantId, createdAt])
  @@index([tenantId, name])
  @@index([tenantId, price])
  @@index([tenantId, stock])
  @@index([tenantId, tags])
  @@index([createdAt])
  @@index([updatedAt])
}

model Invoice {
  id         String   @id @default(uuid())
  tenantId   String
  orderId    String
  number     String?
  series     String?
  currency   String?
  total      Decimal? @db.Decimal(14,2)
  taxAmount  Decimal? @db.Decimal(14,2)
  status     String   @default("draft") // draft, issued, paid, cancelled, overdue
  pdfUrl     String?
  issuedAt   DateTime?
  dueDate    DateTime?
  paidAt     DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  billingItems BillingBatchItem[]
  payments   Payment[]
  
  @@index([tenantId])
  @@index([orderId])
  @@index([number])
  @@index([status])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, issuedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, paidAt])
  @@index([createdAt])
  @@index([issuedAt])
  @@index([dueDate])
}

model Payment {
  id            String   @id @default(uuid())
  tenantId      String
  invoiceId     String
  amount        Decimal  @db.Decimal(14,2)
  currency      String   @default("USD")
  status        String   @default("pending") // pending, completed, failed, cancelled, refunded
  method        String   @default("card") // card, bank_transfer, paypal, stripe, other
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  
  @@index([tenantId])
  @@index([invoiceId])
  @@index([status])
  @@index([method])
  @@index([transactionId])
}

model Return {
  id          String   @id @default(uuid())
  orderId     String
  tenantId    String
  
  status      String?
  reason      String?
  notes       String?
  refundAmount Decimal? @db.Decimal(14,2)
  items       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  photos      ReturnPhoto[]
  notifications ReturnNotification[]
  
  @@index([orderId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
}

model ReturnPhoto {
  id        String   @id @default(uuid())
  returnId  String
  fileUrl   String
  note      String?
  createdAt DateTime @default(now())
  return    Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
}

model ReturnNotification {
  id        String   @id @default(uuid())
  returnId  String
  channel   String   // email, sms, web
  subject   String?
  message   String?
  sentAt    DateTime @default(now())
  return    Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
}

// Order service charges (admin-set line items for billing)
model OrderServiceCharge {
  id        String   @id @default(uuid())
  orderId   String
  type      String
  amount    Decimal  @db.Decimal(14,2)
  currency  String   @default("TRY")
  notes     String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

// Business hours per tenant
model BusinessHours {
  id        String   @id @default(uuid())
  tenantId  String
  weekday   Int      // 0=Sun .. 6=Sat
  startTime String   // HH:mm
  endTime   String   // HH:mm
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, weekday])
}

// Holidays per tenant
model Holiday {
  id        String   @id @default(uuid())
  tenantId  String
  date      DateTime
  name      String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, date])
  @@index([tenantId, date])
}

// Calendar events (admin editable, customer read-only)
model CalendarEvent {
  id        String   @id @default(uuid())
  tenantId  String
  title     String
  description String?
  type      String   @default("general")
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, startAt])
}

// OAuth credentials (e.g., Google Calendar) - encrypted payload stored as JSON
model OAuthCredential {
  id         String   @id @default(uuid())
  tenantId   String
  provider   String   // 'google_calendar'
  secret     Json     // encrypted payload from EncryptionService
  keyVersion Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, provider])
}

// WooCommerce store connection per tenant
model WooStore {
  id             String   @id @default(uuid())
  tenantId       String
  name           String
  baseUrl        String   // https://shop.example.com
  consumerKey    String
  consumerSecret String
  apiVersion     String   @default("v3")
  webhookSecret  String?
  active         Boolean  @default(true)
  lastSync       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders         Order[]
  products       Product[]
  customers      Customer[]

  @@index([tenantId, active])
}

// Billing batch for semi-manual invoicing
model BillingBatch {
  id         String   @id @default(uuid())
  tenantId   String
  periodFrom DateTime?
  periodTo   DateTime?
  status     String   @default("created") // created, issued, archived
  total      Decimal? @db.Decimal(14,2)
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  items      BillingBatchItem[]

  @@index([tenantId, createdAt])
}

model BillingBatchItem {
  id        String   @id @default(uuid())
  batchId   String
  invoiceId String
  amount    Decimal  @db.Decimal(14,2)
  createdAt DateTime @default(now())
  batch     BillingBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  invoice   Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([invoiceId])
}

// Inbound shipments for warehouse receiving
model InboundShipment {
  id        String   @id @default(uuid())
  tenantId  String
  reference String?
  status    String   @default("created") // created, received, cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  items     InboundItem[]

  @@index([tenantId, createdAt])
}

model InboundItem {
  id        String   @id @default(uuid())
  inboundId String
  productId String?
  sku       String?
  name      String?
  quantity  Int
  createdAt DateTime @default(now())
  inbound   InboundShipment @relation(fields: [inboundId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])

  @@index([inboundId])
  @@index([productId])
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  type      String   // INBOUND, ADJUSTMENT, RETURN
  quantity  Int
  relatedId String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, createdAt])
}

// Requests & Approvals System
model Request {
  id           String   @id @default(uuid())
  tenantId     String
  customerId   String?
  createdBy    String
  type         String   // STOCK_ADJUSTMENT, NEW_PRODUCT, ORDER_NOTE, DOCUMENT_UPLOAD, OTHER
  status       String   // DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, APPLIED
  priority     String   @default("normal") // low, normal, high, critical
  payload      Json
  reviewerUserId String?
  reviewedAt   DateTime?
  appliedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  creator      User     @relation(fields: [createdBy], references: [id])
  comments     RequestComment[]
  attachments  RequestAttachment[]
  
  @@index([tenantId, status, createdAt])
  @@index([createdBy])
}

model RequestComment {
  id        String   @id @default(uuid())
  requestId String
  authorId  String
  message   String
  isInternal Boolean @default(false)
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  
  @@index([requestId])
}

model RequestAttachment {
  id        String   @id @default(uuid())
  requestId String
  fileName  String
  fileUrl   String
  mimeType  String?
  fileSize  Int?
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  @@index([requestId])
}

// Audit Log
model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String?
  userId      String?
  action      String
  entityType  String?
  entityId    String?
  changes     Json?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  
  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

// Sync State
model SyncState {
  id          String   @id @default(uuid())
  accountId   String
  entityType  String
  lastSyncAt  DateTime
  checkpoint  Json?
  status      String   @default("idle") // idle, running, failed
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([accountId, entityType])
  @@index([status])
}

// Ingested webhook events
model WebhookEvent {
  id         String   @id @default(uuid())
  tenantId   String
  storeId    String
  provider   String   // 'woocommerce'
  topic      String
  signature  String?
  payload    Json
  status     String   @default("received") // received, processed, failed
  attempts   Int      @default(0)
  error      String?
  createdAt  DateTime @default(now())
  processedAt DateTime?

  @@index([tenantId, storeId, topic, status])
}

// JWT Keys for RS256 (persistence and rotation)
model JwtKey {
  id         String   @id @default(uuid())
  kid        String   @unique
  alg        String
  publicJwk  Json
  privatePem String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  rotatedAt  DateTime?
  expiresAt  DateTime?

  @@index([active, createdAt])
}

model Settings {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category  String   // email, notification, general
  key       String   // smtp_host, smtp_port, etc.
  value     String?  // encrypted value for sensitive data
  isSecret  Boolean  @default(false) // whether the value should be encrypted
  metadata  Json?    // additional configuration
  updatedBy String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([tenantId, category, key])
  @@index([tenantId, category])
}

// Order number sequence per tenant
model OrderNoSeq {
  tenantId String @id
  value    Int    @default(1)
  updatedAt DateTime @updatedAt

  @@map("_OrderNoSeq")
}