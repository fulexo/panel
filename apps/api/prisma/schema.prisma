generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                      String                   @id @default(uuid())
  name                    String
  slug                    String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  auditLogs               AuditLog[]
  billingBatches          BillingBatch[]
  bundleProducts          BundleProduct[]
  businessHours           BusinessHours[]
  calendarEvents          CalendarEvent[]
  carts                   Cart[]
  customers               Customer[]
  customerShippingPrices  CustomerShippingPrice[]
  fileUploads             FileUpload[]
  fulfillmentBillingItems FulfillmentBillingItem[]
  fulfillmentInvoices     FulfillmentInvoice[]
  fulfillmentServices     FulfillmentService[]
  holidays                Holiday[]
  inboundShipments        InboundShipment[]
  inventoryRequests       InventoryRequest[]
  invoices                Invoice[]
  notifications           Notification[]
  oauthCredentials        OAuthCredential[]
  orders                  Order[]
  ownershipRules          OwnershipRule[]
  payments                Payment[]
  policies                Policy[]
  products                Product[]
  requests                Request[]
  returns                 Return[]
  settings                Settings[]
  shipments               Shipment[]
  shippingPrices          ShippingPrice[]
  shippingZones           ShippingZone[]
  users                   User[]
  wooStores               WooStore[]
}

model User {
  id                      String               @id @default(uuid())
  tenantId                String?
  email                   String               @unique
  name                    String?
  firstName               String?
  lastName                String?
  passwordHash            String
  role                    String               @default("CUSTOMER")
  twofaSecret             String?
  twofaEnabled            Boolean              @default(false)
  temp2faToken            String?
  temp2faTokenExpires     DateTime?
  lastLoginAt             DateTime?
  failedAttempts          Int                  @default(0)
  lockedUntil             DateTime?
  isActive                Boolean              @default(true)
  notificationPreferences Json?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  auditLogs               AuditLog[]
  carts                   Cart[]
  fulfillmentInvoices     FulfillmentInvoice[]
  inventoryRequests       InventoryRequest[]
  notifications           Notification[]
  requests                Request[]
  requestComments         RequestComment[]
  sessions                Session[]
  stores                  Store[]
  supportTickets          SupportTicket[]
  tenant                  Tenant?              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, role])
  @@index([tenantId, isActive])
  @@index([tenantId, lastLoginAt])
  @@index([tenantId, createdAt])
  @@index([tenantId, email])
  @@index([tenantId, role, isActive])
  @@index([role])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@index([email])
  @@index([failedAttempts])
  @@index([lockedUntil])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  fingerprint String?
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([userId, expiresAt])
  @@index([fingerprint])
  @@index([expiresAt, createdAt])
}

model OwnershipRule {
  id             String   @id @default(uuid())
  tenantId       String
  entityType     String
  priority       Int
  conditionsJson Json
  actionJson     Json
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, entityType, priority])
}

model Policy {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  description String?
  modules     Json
  actions     Json
  dataScope   Json
  piiSettings Json
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, name])
}

model RemoteEntityMap {
  id         String   @id @default(uuid())
  tenantId   String
  storeId    String
  provider   String
  entityType String
  remoteId   String
  localType  String
  localId    String
  createdAt  DateTime @default(now())

  @@unique([storeId, entityType, remoteId])
  @@index([tenantId, provider, entityType])
}

model Customer {
  id               String                  @id @default(uuid())
  tenantId         String
  storeId          String
  wooId            String?
  email            String
  emailNormalized  String?
  phoneE164        String?
  name             String?
  firstName        String?
  lastName         String?
  username         String?
  company          String?
  vatId            String?
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  notes            String?
  tags             String[]
  role             String                  @default("customer")
  billingInfo      Json?
  shippingInfo     Json?
  isPayingCustomer Boolean                 @default(false)
  avatarUrl        String?
  metaData         Json?
  lastSyncedAt     DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  Store            Store                   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tenant           Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  shippingPrices   CustomerShippingPrice[]
  orders           Order[]

  @@unique([wooId, storeId])
  @@index([tenantId])
  @@index([storeId])
  @@index([email])
  @@index([firstName])
  @@index([lastName])
  @@index([role])
  @@index([lastSyncedAt])
  @@index([createdAt])
}

model Order {
  id                      String                   @id @default(uuid())
  tenantId                String
  storeId                 String
  wooId                   String?
  orderNumber             String?
  orderNo                 Int?
  externalOrderNo         String?
  orderSource             String?
  status                  String                   @default("pending_approval")
  mappedStatus            String?
  currency                String                   @default("USD")
  total                   Decimal                  @db.Decimal(14, 2)
  customerId              String?
  customerEmail           String?
  customerPhone           String?
  billingInfo             Json?
  billingAddress          Json?
  shippingInfo            Json?
  shippingAddress         Json?
  lineItems               Json?
  paymentMethod           String?
  paymentMethodTitle      String?
  transactionId           String?
  notes                   String?
  tags                    String[]
  confirmedAt             DateTime?
  datePaid                DateTime?
  dateCompleted           DateTime?
  metaData                Json?
  lastSyncedAt            DateTime?
  approvalStatus          String                   @default("pending")
  approvedBy              String?
  approvedAt              DateTime?
  rejectionReason         String?
  createdBy               String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  fulfillmentBillingItems FulfillmentBillingItem[]
  invoices                Invoice[]
  customer                Customer?                @relation(fields: [customerId], references: [id])
  store                   Store                    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tenant                  Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items                   OrderItem[]
  serviceCharges          OrderServiceCharge[]
  returns                 Return[]
  shipments               Shipment[]

  @@unique([wooId, storeId])
  @@index([tenantId])
  @@index([storeId])
  @@index([status])
  @@index([orderNumber])
  @@index([customerId])
  @@index([createdAt])
  @@index([datePaid])
  @@index([dateCompleted])
  @@index([lastSyncedAt])
  @@index([approvalStatus])
  @@index([approvedBy])
  @@index([createdBy])
  @@index([tenantId, approvalStatus])
  @@index([tenantId, status])
}

model OrderItem {
  id      String   @id @default(uuid())
  orderId String
  sku     String?
  name    String?
  qty     Int
  price   Decimal? @db.Decimal(14, 2)
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([sku])
  @@index([orderId, sku])
  @@index([name])
  @@index([qty])
  @@index([price])
}

model Shipment {
  id          String    @id @default(uuid())
  orderId     String
  tenantId    String
  carrier     String?
  trackingNo  String?
  status      String?
  labelUrl    String?
  trackingUrl String?
  karrioShipmentId String?
  protocolUrl String?
  weight      Decimal?  @db.Decimal(10, 3)
  dimensions  Json?
  rate        Json?
  meta        Json?
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([trackingNo])
  @@index([orderId])
  @@index([tenantId, status])
  @@index([tenantId, carrier])
  @@index([tenantId, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([carrier])
  @@index([status])
  @@index([shippedAt])
  @@index([deliveredAt])
}

model Product {
  id                 String              @id @default(uuid())
  tenantId           String
  storeId            String
  wooId              String?
  name               String
  sku                String?
  price              Decimal             @db.Decimal(14, 2)
  regularPrice       Decimal             @db.Decimal(14, 2)
  salePrice          Decimal?            @db.Decimal(14, 2)
  stockQuantity      Int?
  stock              Int?
  weight             Decimal?            @db.Decimal(10, 3)
  dimensions         Json?
  stockStatus        String              @default("instock")
  status             String              @default("publish")
  active             Boolean             @default(true)
  description        String?
  shortDescription   String?
  images             String[]
  categories         String[]
  tags               String[]
  metaData           Json?
  lastSyncedAt       DateTime?
  productType        String              @default("simple")
  isBundle           Boolean             @default(false)
  bundleItems        Json?
  bundlePricing      String              @default("fixed")
  bundleDiscount     Decimal?            @db.Decimal(5, 2)
  minBundleItems     Int?
  maxBundleItems     Int?
  bundleStock        String              @default("parent")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bundleProducts     BundleProduct[]     @relation("BundleParent")
  parentBundles      BundleProduct[]     @relation("BundleChild")
  cartItems          CartItem[]
  inboundItems       InboundItem[]
  inventoryApprovals InventoryApproval[]
  inventoryRequests  InventoryRequest[]
  wooStore           Store               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  stockMovements     StockMovement[]

  @@unique([wooId, storeId])
  @@index([tenantId])
  @@index([storeId])
  @@index([sku])
  @@index([status])
  @@index([stockStatus])
  @@index([name])
  @@index([price])
  @@index([stockQuantity])
  @@index([lastSyncedAt])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([productType])
  @@index([isBundle])
}

model BundleProduct {
  id          String   @id @default(uuid())
  tenantId    String
  bundleId    String
  productId   String
  quantity    Int      @default(1)
  isOptional  Boolean  @default(false)
  minQuantity Int?
  maxQuantity Int?
  discount    Decimal? @db.Decimal(5, 2)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bundle      Product  @relation("BundleParent", fields: [bundleId], references: [id], onDelete: Cascade)
  product     Product  @relation("BundleChild", fields: [productId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId])
  @@index([tenantId])
  @@index([bundleId])
  @@index([productId])
  @@index([isOptional])
  @@index([sortOrder])
}

model Invoice {
  id           String             @id @default(uuid())
  tenantId     String
  orderId      String
  number       String?
  series       String?
  currency     String?
  total        Decimal?           @db.Decimal(14, 2)
  taxAmount    Decimal?           @db.Decimal(14, 2)
  status       String             @default("draft")
  pdfUrl       String?
  issuedAt     DateTime?
  dueDate      DateTime?
  paidAt       DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  billingItems BillingBatchItem[]
  order        Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant       Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments     Payment[]

  @@index([tenantId])
  @@index([orderId])
  @@index([number])
  @@index([status])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, issuedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, paidAt])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, status, dueDate])
  @@index([createdAt])
  @@index([issuedAt])
  @@index([dueDate])
  @@index([paidAt])
  @@index([series])
}

model Payment {
  id            String    @id @default(uuid())
  tenantId      String
  invoiceId     String
  amount        Decimal   @db.Decimal(14, 2)
  currency      String    @default("USD")
  status        String    @default("pending")
  method        String    @default("card")
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  invoice       Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([invoiceId])
  @@index([status])
  @@index([method])
  @@index([transactionId])
  @@index([tenantId, status])
  @@index([tenantId, method])
  @@index([tenantId, status, createdAt])
  @@index([processedAt])
}

model Return {
  id            String               @id @default(uuid())
  orderId       String
  tenantId      String
  status        String?
  reason        String?
  notes         String?
  refundAmount  Decimal?             @db.Decimal(14, 2)
  items         Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  order         Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant        Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  notifications ReturnNotification[]
  photos        ReturnPhoto[]

  @@index([orderId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([status])
  @@index([refundAmount])
}

model ReturnPhoto {
  id        String   @id @default(uuid())
  returnId  String
  fileUrl   String
  note      String?
  createdAt DateTime @default(now())
  return    Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@index([createdAt])
}

model ReturnNotification {
  id       String   @id @default(uuid())
  returnId String
  channel  String
  subject  String?
  message  String?
  sentAt   DateTime @default(now())
  return   Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@index([channel])
  @@index([sentAt])
}

model OrderServiceCharge {
  id        String   @id @default(uuid())
  orderId   String
  type      String
  amount    Decimal  @db.Decimal(14, 2)
  currency  String   @default("TRY")
  notes     String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([type])
  @@index([amount])
  @@index([createdAt])
}

model BusinessHours {
  id        String   @id @default(uuid())
  tenantId  String
  weekday   Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, weekday])
  @@index([tenantId])
  @@index([weekday])
}

model Holiday {
  id        String   @id @default(uuid())
  tenantId  String
  date      DateTime
  name      String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, date])
  @@index([tenantId, date])
  @@index([date])
  @@index([name])
}

model CalendarEvent {
  id          String   @id @default(uuid())
  tenantId    String
  title       String
  description String?
  type        String   @default("general")
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, startAt])
  @@index([tenantId, type])
  @@index([startAt])
  @@index([endAt])
  @@index([type])
}

model OAuthCredential {
  id         String   @id @default(uuid())
  tenantId   String
  provider   String
  secret     Json
  keyVersion Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider])
  @@index([tenantId])
  @@index([provider])
  @@index([keyVersion])
}

model Store {
  id                 String              @id @default(uuid())
  name               String
  url                String
  baseUrl            String?
  consumerKey        String
  consumerSecret     String
  status             String              @default("disconnected")
  lastSyncAt         DateTime?
  syncStatus         String?
  lastError          String?
  customerId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  carts              Cart[]
  Customer           Customer[]
  inventoryApprovals InventoryApproval[]
  inventoryRequests  InventoryRequest[]
  orders             Order[]
  products           Product[]
  customer           User                @relation(fields: [customerId], references: [id], onDelete: Cascade)
  supportTickets     SupportTicket[]

  @@index([customerId])
  @@index([status])
  @@index([lastSyncAt])
  @@index([createdAt])
}

model WooStore {
  id             String   @id @default(uuid())
  tenantId       String
  name           String
  baseUrl        String
  consumerKey    String
  consumerSecret String
  apiVersion     String   @default("v3")
  webhookSecret  String?
  active         Boolean  @default(true)
  lastSync       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, active])
  @@index([tenantId, active, createdAt])
  @@index([active])
  @@index([baseUrl])
  @@index([createdAt])
}

model BillingBatch {
  id         String             @id @default(uuid())
  tenantId   String
  periodFrom DateTime?
  periodTo   DateTime?
  status     String             @default("created")
  total      Decimal?           @db.Decimal(14, 2)
  createdAt  DateTime           @default(now())
  tenant     Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items      BillingBatchItem[]

  @@index([tenantId, createdAt])
  @@index([tenantId, status])
  @@index([status])
  @@index([periodFrom])
  @@index([periodTo])
}

model BillingBatchItem {
  id        String       @id @default(uuid())
  batchId   String
  invoiceId String
  amount    Decimal      @db.Decimal(14, 2)
  createdAt DateTime     @default(now())
  batch     BillingBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  invoice   Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([invoiceId])
  @@index([amount])
  @@index([createdAt])
}

model InboundShipment {
  id        String        @id @default(uuid())
  tenantId  String
  reference String?
  status    String        @default("created")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  items     InboundItem[]
  tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([tenantId, status])
  @@index([status])
  @@index([reference])
}

model InboundItem {
  id        String          @id @default(uuid())
  inboundId String
  productId String?
  sku       String?
  name      String?
  quantity  Int
  createdAt DateTime        @default(now())
  inbound   InboundShipment @relation(fields: [inboundId], references: [id], onDelete: Cascade)
  product   Product?        @relation(fields: [productId], references: [id])

  @@index([inboundId])
  @@index([productId])
  @@index([sku])
  @@index([quantity])
  @@index([createdAt])
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  type      String
  quantity  Int
  relatedId String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, createdAt])
  @@index([productId, type])
  @@index([type])
  @@index([quantity])
  @@index([relatedId])
}

model Request {
  id             String              @id @default(uuid())
  tenantId       String
  customerId     String?
  createdBy      String
  type           String
  status         String
  priority       String              @default("normal")
  payload        Json
  reviewerUserId String?
  reviewedAt     DateTime?
  appliedAt      DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  creator        User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  attachments    RequestAttachment[]
  comments       RequestComment[]

  @@index([tenantId, status, createdAt])
  @@index([tenantId, type])
  @@index([tenantId, priority])
  @@index([createdBy])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([reviewerUserId])
  @@index([reviewedAt])
  @@index([appliedAt])
}

model RequestComment {
  id         String   @id @default(uuid())
  requestId  String
  authorId   String
  message    String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([authorId])
  @@index([isInternal])
  @@index([createdAt])
}

model RequestAttachment {
  id        String   @id @default(uuid())
  requestId String
  fileName  String
  fileUrl   String
  mimeType  String?
  fileSize  Int?
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([fileName])
  @@index([mimeType])
  @@index([fileSize])
  @@index([createdAt])
}

model AuditLog {
  id         String   @id @default(uuid())
  tenantId   String?
  userId     String?
  action     String
  entityType String?
  entityId   String?
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([tenantId, action])
  @@index([entityType])
  @@index([entityId])
  @@index([ipAddress])
  @@index([action, entityType])
}

model SyncState {
  id         String   @id @default(uuid())
  accountId  String
  entityType String
  lastSyncAt DateTime
  checkpoint Json?
  status     String   @default("idle")
  error      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([accountId, entityType])
  @@index([status])
  @@index([accountId])
  @@index([entityType])
  @@index([lastSyncAt])
  @@index([status, lastSyncAt])
}

model WebhookEvent {
  id          String    @id @default(uuid())
  tenantId    String
  storeId     String
  provider    String
  topic       String
  signature   String?
  payload     Json
  status      String    @default("received")
  attempts    Int       @default(0)
  error       String?
  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@index([tenantId, storeId, topic, status])
  @@index([tenantId, status])
  @@index([storeId, status])
  @@index([provider])
  @@index([topic])
  @@index([status])
  @@index([attempts])
  @@index([createdAt])
  @@index([processedAt])
}

model JwtKey {
  id         String    @id @default(uuid())
  kid        String    @unique
  alg        String
  publicJwk  Json
  privatePem String?
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  rotatedAt  DateTime?
  expiresAt  DateTime?

  @@index([active, createdAt])
  @@index([active])
  @@index([alg])
  @@index([expiresAt])
  @@index([rotatedAt])
}

model Settings {
  id        String   @id @default(uuid())
  tenantId  String
  category  String
  key       String
  value     String?
  isSecret  Boolean  @default(false)
  metadata  Json?
  updatedBy String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, category, key])
  @@index([tenantId, category])
  @@index([category])
  @@index([key])
  @@index([isSecret])
  @@index([updatedBy])
  @@index([updatedAt])
}

model InventoryApproval {
  id          String    @id @default(uuid())
  storeId     String
  productId   String?
  changeType  String
  oldValue    Json?
  newValue    Json?
  requestedBy String
  status      String    @default("pending")
  reviewedBy  String?
  reviewedAt  DateTime?
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product?  @relation(fields: [productId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([productId])
  @@index([changeType])
  @@index([status])
  @@index([requestedBy])
  @@index([reviewedBy])
  @@index([createdAt])
  @@index([reviewedAt])
}

model SupportTicket {
  id          String           @id @default(uuid())
  storeId     String?
  customerId  String?
  subject     String
  description String
  status      String           @default("open")
  priority    String           @default("normal")
  assignedTo  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  messages    SupportMessage[]
  customer    User?            @relation(fields: [customerId], references: [id])
  store       Store?           @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([customerId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([createdAt])
}

model SupportMessage {
  id         String        @id @default(uuid())
  ticketId   String
  authorId   String
  message    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorId])
  @@index([isInternal])
  @@index([createdAt])
}

model FileUpload {
  id           String    @id @default(uuid())
  tenantId     String
  filename     String
  originalName String
  mimeType     String
  size         Int
  key          String    @unique
  status       String    @default("PENDING")
  maxSize      Int?
  uploadedAt   DateTime?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])
  @@index([mimeType])
  @@index([createdAt])
  @@index([uploadedAt])
}

model OrderNoSeq {
  tenantId  String   @id
  value     Int      @default(1)
  updatedAt DateTime @updatedAt

  @@index([value])
  @@map("_OrderNoSeq")
}

model Cart {
  id        String     @id @default(uuid())
  tenantId  String
  userId    String
  storeId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@unique([userId, storeId])
  @@index([tenantId])
  @@index([userId])
  @@index([storeId])
  @@index([createdAt])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@index([quantity])
}

model ShippingZone {
  id             String                  @id @default(uuid())
  tenantId       String
  name           String
  description    String?
  isActive       Boolean                 @default(true)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  customerPrices CustomerShippingPrice[]
  prices         ShippingPrice[]
  tenant         Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([isActive])
  @@index([name])
}

model ShippingPrice {
  id                    String                  @id @default(uuid())
  tenantId              String
  zoneId                String
  name                  String
  description           String?
  basePrice             Decimal                 @db.Decimal(10, 2)
  freeShippingThreshold Decimal?                @db.Decimal(10, 2)
  estimatedDays         String?
  isActive              Boolean                 @default(true)
  priority              Int                     @default(0)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  customerPrices        CustomerShippingPrice[]
  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  zone                  ShippingZone            @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([zoneId])
  @@index([isActive])
  @@index([priority])
  @@index([basePrice])
}

model CustomerShippingPrice {
  id              String        @id @default(uuid())
  tenantId        String
  customerId      String?
  zoneId          String
  priceId         String
  adjustmentType  String
  adjustmentValue Decimal       @db.Decimal(10, 2)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customer        Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  price           ShippingPrice @relation(fields: [priceId], references: [id], onDelete: Cascade)
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  zone            ShippingZone  @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@unique([customerId, zoneId, priceId])
  @@index([tenantId])
  @@index([customerId])
  @@index([zoneId])
  @@index([priceId])
  @@index([isActive])
}

model InventoryRequest {
  id               String    @id @default(uuid())
  tenantId         String
  storeId          String
  customerId       String
  type             String
  status           String    @default("pending")
  title            String
  description      String?
  productId        String?
  currentStock     Int?
  requestedStock   Int?
  adjustmentReason String?
  productData      Json?
  updateData       Json?
  reviewedBy       String?
  reviewedAt       DateTime?
  rejectionReason  String?
  adminNotes       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  customer         User      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product          Product?  @relation(fields: [productId], references: [id])
  store            Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([storeId])
  @@index([customerId])
  @@index([productId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([tenantId, status])
  @@index([customerId, status])
}

model FulfillmentService {
  id           String                   @id @default(uuid())
  tenantId     String
  name         String
  description  String?
  unit         String
  basePrice    Decimal                  @db.Decimal(10, 2)
  isActive     Boolean                  @default(true)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  billingItems FulfillmentBillingItem[]
  tenant       Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([isActive])
  @@index([name])
}

model FulfillmentBillingItem {
  id          String              @id @default(uuid())
  tenantId    String
  orderId     String
  serviceId   String
  quantity    Decimal             @db.Decimal(10, 2)
  unitPrice   Decimal             @db.Decimal(10, 2)
  totalPrice  Decimal             @db.Decimal(10, 2)
  description String?
  serviceDate DateTime            @default(now())
  isBilled    Boolean             @default(false)
  billedAt    DateTime?
  invoiceId   String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  invoice     FulfillmentInvoice? @relation(fields: [invoiceId], references: [id])
  order       Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service     FulfillmentService  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([orderId])
  @@index([serviceId])
  @@index([isBilled])
  @@index([serviceDate])
  @@index([billedAt])
  @@index([tenantId, isBilled])
  @@index([tenantId, serviceDate])
}

model FulfillmentInvoice {
  id            String                   @id @default(uuid())
  tenantId      String
  customerId    String
  invoiceNumber String
  month         Int
  year          Int
  totalAmount   Decimal                  @db.Decimal(10, 2)
  status        String                   @default("draft")
  dueDate       DateTime
  paidAt        DateTime?
  notes         String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  items         FulfillmentBillingItem[]
  customer      User                     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant        Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, invoiceNumber])
  @@index([tenantId])
  @@index([customerId])
  @@index([month, year])
  @@index([status])
  @@index([dueDate])
  @@index([tenantId, month, year])
}

model Notification {
  id        String   @id @default(uuid())
  tenantId  String
  userId    String?
  type      String
  title     String
  message   String
  priority  String   @default("medium")
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([read])
  @@index([createdAt])
  @@index([tenantId, userId, read])
  @@index([tenantId, type, createdAt])
}
