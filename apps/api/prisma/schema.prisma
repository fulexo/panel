datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  users     User[]
  
  ownershipRules OwnershipRule[]
  customers Customer[]
  orders    Order[]
  products  Product[]
  requests  Request[]
  policies  Policy[]
  auditLogs AuditLog[]
  businessHours BusinessHours[]
  holidays  Holiday[]
  calendarEvents CalendarEvent[]
  oauthCredentials OAuthCredential[]
  billingBatches BillingBatch[]
  inboundShipments InboundShipment[]
  settings  Settings[]
  wooStores WooStore[]
  invoices  Invoice[]
  payments  Payment[]
  shipments Shipment[]
  returns   Return[]
  fileUploads FileUpload[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String   @id @default(uuid())
  tenantId      String?
  email         String   @unique
  name          String?
  firstName     String?
  lastName      String?
  passwordHash  String
  role          String   @default("CUSTOMER") // ADMIN, CUSTOMER
  twofaSecret   String?
  twofaEnabled  Boolean  @default(false)
  temp2faToken  String?
  temp2faTokenExpires DateTime?
  lastLoginAt   DateTime?
  failedAttempts Int     @default(0)
  lockedUntil   DateTime?
  isActive      Boolean  @default(true)
  notificationPreferences Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessions      Session[]
  auditLogs     AuditLog[]
  requests      Request[]
  requestComments RequestComment[]
  stores        Store[]  // Customer can have stores
  supportTickets SupportTicket[] // Customer support tickets

  @@index([tenantId])
  @@index([tenantId, role])
  @@index([tenantId, isActive])
  @@index([tenantId, lastLoginAt])
  @@index([tenantId, createdAt])
  @@index([tenantId, email])
  @@index([tenantId, role, isActive])
  @@index([role])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@index([email])
  @@index([failedAttempts])
  @@index([lockedUntil])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  fingerprint String?
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([userId, expiresAt])
  @@index([fingerprint])
  @@index([expiresAt, createdAt])
}


model OwnershipRule {
  id             String  @id @default(uuid())
  tenantId       String
  entityType     String
  priority       Int
  conditionsJson Json
  actionJson     Json
  active         Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId, entityType, priority])
}

model Policy {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  description String?
  modules     Json     // {orders: true, shipments: true, ...}
  actions     Json     // {allowDownloadLabels: true, ...}
  dataScope   Json     // {allowedStatuses: [], ...}
  piiSettings Json     // {maskEmail: true, ...}
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  @@unique([tenantId, name])
}

// EntityMap removed

// Generic mapping for remote provider entities (provider-agnostic)
model RemoteEntityMap {
  id         String   @id @default(uuid())
  tenantId   String
  storeId    String
  provider   String   // 'woocommerce'
  entityType String   // 'order' | 'product' | 'customer' | ...
  remoteId   String
  localType  String   // maps to local table type
  localId    String
  createdAt  DateTime @default(now())

  @@unique([storeId, entityType, remoteId])
  @@index([tenantId, provider, entityType])
}

model Customer {
  id              String   @id @default(uuid())
  tenantId        String
  storeId         String
  wooId           String?  // WooCommerce customer ID
  email           String
  emailNormalized String?  // Normalized email for searching
  phoneE164       String?  // International phone number
  name            String?  // Full name
  firstName       String?
  lastName        String?
  username        String?
  company         String?  // Company name
  vatId           String?  // VAT ID
  addressLine1    String?  // Address line 1
  addressLine2    String?  // Address line 2
  city            String?  // City
  state           String?  // State/Province
  postalCode      String?  // Postal code
  country         String?  // Country
  notes           String?  // Customer notes
  tags            String[] // Customer tags
  role            String   @default("customer")
  billingInfo     Json?    // Billing information
  shippingInfo    Json?    // Shipping information
  isPayingCustomer Boolean @default(false)
  avatarUrl       String?
  metaData        Json?    // WooCommerce meta data
  lastSyncedAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  store           Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders          Order[]

  @@unique([wooId, storeId])
  @@index([tenantId])
  @@index([storeId])
  @@index([email])
  @@index([firstName])
  @@index([lastName])
  @@index([role])
  @@index([lastSyncedAt])
  @@index([createdAt])
}

model Order {
  id             String   @id @default(uuid())
  tenantId       String
  storeId        String
  wooId          String?  // WooCommerce order ID
  orderNumber    String?  // Order number from WooCommerce
  orderNo        Int?     // Sequential order number
  externalOrderNo String? // External order number
  orderSource    String?  // Order source (woocommerce, manual, etc.)
  status         String   @default("pending")
  mappedStatus   String?  // Mapped status
  currency       String   @default("USD")
  total          Decimal  @db.Decimal(14,2)
  customerId     String?  // WooCommerce customer ID
  customerEmail  String?  // Customer email
  customerPhone  String?  // Customer phone
  billingInfo    Json?    // Billing information
  billingAddress Json?    // Billing address
  shippingInfo   Json?    // Shipping information
  shippingAddress Json?   // Shipping address
  lineItems      Json?    // Order line items
  paymentMethod  String?
  paymentMethodTitle String?
  transactionId  String?
  notes          String?  // Order notes
  tags           String[] // Order tags
  confirmedAt    DateTime? // Order confirmation date
  datePaid       DateTime?
  dateCompleted  DateTime?
  metaData       Json?    // WooCommerce meta data
  lastSyncedAt   DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  store          Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer       Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items          OrderItem[]
  shipments      Shipment[]
  returns        Return[]
  invoices       Invoice[]
  serviceCharges OrderServiceCharge[]

  @@unique([wooId, storeId])
  @@index([tenantId])
  @@index([storeId])
  @@index([status])
  @@index([orderNumber])
  @@index([customerId])
  @@index([createdAt])
  @@index([datePaid])
  @@index([dateCompleted])
  @@index([lastSyncedAt])
}

model OrderItem {
  id      String  @id @default(uuid())
  orderId String
  sku     String?
  name    String?
  qty     Int
  price   Decimal? @db.Decimal(14,2)
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([sku])
  @@index([orderId, sku])
  @@index([name])
  @@index([qty])
  @@index([price])
}

model Shipment {
  id          String   @id @default(uuid())
  orderId     String
  tenantId    String
  
  carrier     String?
  trackingNo  String?
  status      String?
  labelUrl    String?
  protocolUrl String?
  weight      Decimal? @db.Decimal(10,3)
  dimensions  Json?
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([trackingNo])
  @@index([orderId])
  @@index([tenantId, status])
  @@index([tenantId, carrier])
  @@index([tenantId, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([carrier])
  @@index([status])
  @@index([shippedAt])
  @@index([deliveredAt])
}

model Product {
  id              String   @id @default(uuid())
  tenantId        String
  storeId         String
  wooId           String?  // WooCommerce product ID
  name            String
  sku             String?
  price           Decimal  @db.Decimal(14,2)
  regularPrice    Decimal  @db.Decimal(14,2)
  salePrice       Decimal? @db.Decimal(14,2)
  stockQuantity   Int?
  stock           Int?     // Alternative stock field
  weight          Decimal? @db.Decimal(10,3) // Product weight
  dimensions      Json?    // Product dimensions
  stockStatus     String   @default("instock") // instock, outofstock, onbackorder
  status          String   @default("publish") // publish, draft, private
  active          Boolean  @default(true) // Product active status
  description     String?
  shortDescription String?
  images          String[] // Array of image URLs
  categories      String[] // Array of category names
  tags            String[] // Array of tag names
  metaData        Json?    // WooCommerce meta data
  lastSyncedAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  store           Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  inboundItems    InboundItem[]
  stockMovements  StockMovement[]
  inventoryApprovals InventoryApproval[]

  @@unique([wooId, storeId])
  @@index([tenantId])
  @@index([storeId])
  @@index([sku])
  @@index([status])
  @@index([stockStatus])
  @@index([name])
  @@index([price])
  @@index([stockQuantity])
  @@index([lastSyncedAt])
  @@index([createdAt])
  @@index([updatedAt])
}

model Invoice {
  id         String   @id @default(uuid())
  tenantId   String
  orderId    String
  number     String?
  series     String?
  currency   String?
  total      Decimal? @db.Decimal(14,2)
  taxAmount  Decimal? @db.Decimal(14,2)
  status     String   @default("draft") // draft, issued, paid, cancelled, overdue
  pdfUrl     String?
  issuedAt   DateTime?
  dueDate    DateTime?
  paidAt     DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  billingItems BillingBatchItem[]
  payments   Payment[]
  
  @@index([tenantId])
  @@index([orderId])
  @@index([number])
  @@index([status])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, issuedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, paidAt])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, status, dueDate])
  @@index([createdAt])
  @@index([issuedAt])
  @@index([dueDate])
  @@index([paidAt])
  @@index([series])
}

model Payment {
  id            String   @id @default(uuid())
  tenantId      String
  invoiceId     String
  amount        Decimal  @db.Decimal(14,2)
  currency      String   @default("USD")
  status        String   @default("pending") // pending, completed, failed, cancelled, refunded
  method        String   @default("card") // card, bank_transfer, paypal, stripe, other
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([invoiceId])
  @@index([status])
  @@index([method])
  @@index([transactionId])
  @@index([tenantId, status])
  @@index([tenantId, method])
  @@index([tenantId, status, createdAt])
  @@index([processedAt])
}

model Return {
  id          String   @id @default(uuid())
  orderId     String
  tenantId    String
  
  status      String?
  reason      String?
  notes       String?
  refundAmount Decimal? @db.Decimal(14,2)
  items       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  photos      ReturnPhoto[]
  notifications ReturnNotification[]
  
  @@index([orderId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([status])
  @@index([refundAmount])
}

model ReturnPhoto {
  id        String   @id @default(uuid())
  returnId  String
  fileUrl   String
  note      String?
  createdAt DateTime @default(now())
  return    Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@index([createdAt])
}

model ReturnNotification {
  id        String   @id @default(uuid())
  returnId  String
  channel   String   // email, sms, web
  subject   String?
  message   String?
  sentAt    DateTime @default(now())
  return    Return   @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@index([channel])
  @@index([sentAt])
}

// Order service charges (admin-set line items for billing)
model OrderServiceCharge {
  id        String   @id @default(uuid())
  orderId   String
  type      String
  amount    Decimal  @db.Decimal(14,2)
  currency  String   @default("TRY")
  notes     String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([type])
  @@index([amount])
  @@index([createdAt])
}

// Business hours per tenant
model BusinessHours {
  id        String   @id @default(uuid())
  tenantId  String
  weekday   Int      // 0=Sun .. 6=Sat
  startTime String   // HH:mm
  endTime   String   // HH:mm
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, weekday])
  @@index([tenantId])
  @@index([weekday])
}

// Holidays per tenant
model Holiday {
  id        String   @id @default(uuid())
  tenantId  String
  date      DateTime
  name      String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, date])
  @@index([tenantId, date])
  @@index([date])
  @@index([name])
}

// Calendar events (admin editable, customer read-only)
model CalendarEvent {
  id        String   @id @default(uuid())
  tenantId  String
  title     String
  description String?
  type      String   @default("general")
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, startAt])
  @@index([tenantId, type])
  @@index([startAt])
  @@index([endAt])
  @@index([type])
}

// OAuth credentials (e.g., Google Calendar) - encrypted payload stored as JSON
model OAuthCredential {
  id         String   @id @default(uuid())
  tenantId   String
  provider   String   // 'google_calendar'
  secret     Json     // encrypted payload from EncryptionService
  keyVersion Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider])
  @@index([tenantId])
  @@index([provider])
  @@index([keyVersion])
}

// Store model for multi-tenant stores
model Store {
  id             String   @id @default(uuid())
  name           String
  url            String   // https://shop.example.com
  baseUrl        String?  // Base URL for API calls
  consumerKey    String
  consumerSecret String
  status         String   @default("disconnected") // connected, disconnected, error
  lastSyncAt     DateTime?
  syncStatus     String?  // success, error, pending
  lastError      String?
  customerId     String   // Links to User (customer)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  customer       User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders         Order[]
  products       Product[]
  customers      Customer[]
  inventoryApprovals InventoryApproval[]
  supportTickets SupportTicket[]

  @@index([customerId])
  @@index([status])
  @@index([lastSyncAt])
  @@index([createdAt])
}

// WooCommerce store connection per tenant (legacy)
model WooStore {
  id             String   @id @default(uuid())
  tenantId       String
  name           String
  baseUrl        String   // https://shop.example.com
  consumerKey    String
  consumerSecret String
  apiVersion     String   @default("v3")
  webhookSecret  String?
  active         Boolean  @default(true)
  lastSync       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, active])
  @@index([tenantId, active, createdAt])
  @@index([active])
  @@index([baseUrl])
  @@index([createdAt])
}

// Billing batch for semi-manual invoicing
model BillingBatch {
  id         String   @id @default(uuid())
  tenantId   String
  periodFrom DateTime?
  periodTo   DateTime?
  status     String   @default("created") // created, issued, archived
  total      Decimal? @db.Decimal(14,2)
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items      BillingBatchItem[]

  @@index([tenantId, createdAt])
  @@index([tenantId, status])
  @@index([status])
  @@index([periodFrom])
  @@index([periodTo])
}

model BillingBatchItem {
  id        String   @id @default(uuid())
  batchId   String
  invoiceId String
  amount    Decimal  @db.Decimal(14,2)
  createdAt DateTime @default(now())
  batch     BillingBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  invoice   Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([invoiceId])
  @@index([amount])
  @@index([createdAt])
}

// Inbound shipments for warehouse receiving
model InboundShipment {
  id        String   @id @default(uuid())
  tenantId  String
  reference String?
  status    String   @default("created") // created, received, cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items     InboundItem[]

  @@index([tenantId, createdAt])
  @@index([tenantId, status])
  @@index([status])
  @@index([reference])
}

model InboundItem {
  id        String   @id @default(uuid())
  inboundId String
  productId String?
  sku       String?
  name      String?
  quantity  Int
  createdAt DateTime @default(now())
  inbound   InboundShipment @relation(fields: [inboundId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([inboundId])
  @@index([productId])
  @@index([sku])
  @@index([quantity])
  @@index([createdAt])
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  type      String   // INBOUND, ADJUSTMENT, RETURN
  quantity  Int
  relatedId String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, createdAt])
  @@index([productId, type])
  @@index([type])
  @@index([quantity])
  @@index([relatedId])
}

// Requests & Approvals System
model Request {
  id           String   @id @default(uuid())
  tenantId     String
  customerId   String?
  createdBy    String
  type         String   // STOCK_ADJUSTMENT, NEW_PRODUCT, ORDER_NOTE, DOCUMENT_UPLOAD, OTHER
  status       String   // DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, APPLIED
  priority     String   @default("normal") // low, normal, high, critical
  payload      Json
  reviewerUserId String?
  reviewedAt   DateTime?
  appliedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  comments     RequestComment[]
  attachments  RequestAttachment[]
  
  @@index([tenantId, status, createdAt])
  @@index([tenantId, type])
  @@index([tenantId, priority])
  @@index([createdBy])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([reviewerUserId])
  @@index([reviewedAt])
  @@index([appliedAt])
}

model RequestComment {
  id        String   @id @default(uuid())
  requestId String
  authorId  String
  message   String
  isInternal Boolean @default(false)
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([requestId])
  @@index([authorId])
  @@index([isInternal])
  @@index([createdAt])
}

model RequestAttachment {
  id        String   @id @default(uuid())
  requestId String
  fileName  String
  fileUrl   String
  mimeType  String?
  fileSize  Int?
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  @@index([requestId])
  @@index([fileName])
  @@index([mimeType])
  @@index([fileSize])
  @@index([createdAt])
}

// Audit Log
model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String?
  userId      String?
  action      String
  entityType  String?
  entityId    String?
  changes     Json?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([tenantId, action])
  @@index([entityType])
  @@index([entityId])
  @@index([ipAddress])
  @@index([action, entityType])
}

// Sync State
model SyncState {
  id          String   @id @default(uuid())
  accountId   String
  entityType  String
  lastSyncAt  DateTime
  checkpoint  Json?
  status      String   @default("idle") // idle, running, failed
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([accountId, entityType])
  @@index([status])
  @@index([accountId])
  @@index([entityType])
  @@index([lastSyncAt])
  @@index([status, lastSyncAt])
}

// Ingested webhook events
model WebhookEvent {
  id         String   @id @default(uuid())
  tenantId   String
  storeId    String
  provider   String   // 'woocommerce'
  topic      String
  signature  String?
  payload    Json
  status     String   @default("received") // received, processed, failed
  attempts   Int      @default(0)
  error      String?
  createdAt  DateTime @default(now())
  processedAt DateTime?

  @@index([tenantId, storeId, topic, status])
  @@index([tenantId, status])
  @@index([storeId, status])
  @@index([provider])
  @@index([topic])
  @@index([status])
  @@index([attempts])
  @@index([createdAt])
  @@index([processedAt])
}

// JWT Keys for RS256 (persistence and rotation)
model JwtKey {
  id         String   @id @default(uuid())
  kid        String   @unique
  alg        String
  publicJwk  Json
  privatePem String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  rotatedAt  DateTime?
  expiresAt  DateTime?

  @@index([active, createdAt])
  @@index([active])
  @@index([alg])
  @@index([expiresAt])
  @@index([rotatedAt])
}

model Settings {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category  String   // email, notification, general
  key       String   // smtp_host, smtp_port, etc.
  value     String?  // encrypted value for sensitive data
  isSecret  Boolean  @default(false) // whether the value should be encrypted
  metadata  Json?    // additional configuration
  updatedBy String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([tenantId, category, key])
  @@index([tenantId, category])
  @@index([category])
  @@index([key])
  @@index([isSecret])
  @@index([updatedBy])
  @@index([updatedAt])
}

// Inventory approval system
model InventoryApproval {
  id          String   @id @default(uuid())
  storeId     String
  productId   String?
  changeType  String   // stock_update, price_update, status_update
  oldValue    Json?
  newValue    Json?
  requestedBy String   // User ID who requested the change
  status      String   @default("pending") // pending, approved, rejected
  reviewedBy  String?  // User ID who reviewed the change
  reviewedAt  DateTime?
  reason      String?  // Reason for approval/rejection
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([storeId])
  @@index([productId])
  @@index([changeType])
  @@index([status])
  @@index([requestedBy])
  @@index([reviewedBy])
  @@index([createdAt])
  @@index([reviewedAt])
}

// Support tickets
model SupportTicket {
  id          String   @id @default(uuid())
  storeId     String?
  customerId  String?  // User ID who created the ticket
  subject     String
  description String
  status      String   @default("open") // open, in_progress, resolved, closed
  priority    String   @default("normal") // low, normal, high, urgent
  assignedTo  String?  // User ID who is assigned to the ticket
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  store       Store?   @relation(fields: [storeId], references: [id], onDelete: SetNull)
  customer    User?    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  messages    SupportMessage[]

  @@index([storeId])
  @@index([customerId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([createdAt])
}

model SupportMessage {
  id        String   @id @default(uuid())
  ticketId  String
  authorId  String   // User ID who wrote the message
  message   String
  isInternal Boolean @default(false) // Internal note vs customer message
  createdAt DateTime @default(now())
  
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorId])
  @@index([isInternal])
  @@index([createdAt])
}

// File upload management
model FileUpload {
  id          String   @id @default(uuid())
  tenantId    String
  filename    String
  originalName String
  mimeType    String
  size        Int
  key         String   @unique // S3/MinIO object key
  status      String   @default("PENDING") // PENDING, COMPLETED, DELETED
  maxSize     Int?     // Maximum allowed size in bytes
  uploadedAt  DateTime?
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])
  @@index([mimeType])
  @@index([createdAt])
  @@index([uploadedAt])
}

// Order number sequence per tenant
model OrderNoSeq {
  tenantId String @id
  value    Int    @default(1)
  updatedAt DateTime @updatedAt

  @@index([value])
  @@map("_OrderNoSeq")
}